38.0
廉价冗余磁盘阵列(RAID)redundant array of inexpensive disks
	使用多个磁盘一起构建
	更快更大更可靠

	由多个磁盘，内存和一个和多个处理器来管理系统
	硬件RAID像一个计算机系统来管理一组磁盘

	透明transparent-对于主机看起来像一个大磁盘，所以可以简单的用RAID替换该磁盘
	提高了可部署性- deployability

38.1
接口和RAID内部

当向RAID发出IO请求时
	会先计算要访问的磁盘的数量
	然后发出一个或多个物理IO来执行操作

RAID构建为单独的硬件盒
	通过标准连接（SCSI，SATA）接入主机
	它包括微控制器，运行固件，和指导RAID的操作
	也包括DRAM储存器-在读取和写入时用来缓存

38.2
故障模型
检测从某些类型的故障中恢复

故障-停止fail-stop故障模型
	工作状态
		所有块都可以读取或写入
	故障状态
		块会永久消失

38.3
评估RAID-3个方面

容量capacity
	RAID客户端可用的容量有多少
可靠性reliability
	给定设计允许有多少磁盘故障
性能performance
	取决于磁盘阵列的工作负载

38.4
RAID 0级：条带化stripe
	磁盘0 【0，4，8】
	磁盘1 【1，5，9】
	磁盘2 【2，6，10】
	磁盘3 【3，7，11】

	以旋转的方式将磁盘阵列分布在磁盘上
	对数组的连续块请求时
	从阵列中获取最大的并行性
	0，1，2，3在同一条带上
	目前是只有一个块放在下一个磁盘上
	也可以用两个块
	磁盘0 【0，1，4，5】
	磁盘1 【2，3，6，7】

块的大小主要影响整列性能
	如果块较小
	许多文件要跨越多个磁盘进行stripe
	增加了对单个文件读写的并行性
	依靠多请求来增加吞吐量

	较大的块
	可以减少定位时间

	大多数块的大小为64KB

容量capacity
	顶级
可靠性reliability
	不行
	任何磁盘发送故障都会导致数据丢失
性能performance
	并行
	使所有磁盘为用户IO服务
		
	单请求延迟（用来揭秘单个请求存在多少并行性）
		设：平均寻道时间7ms，平均旋转延迟3ms，磁盘传输速度50MB/s
		吞吐量为N（磁盘数量）
		S（当磁盘顺序带宽）
		R（当磁盘随机带宽）
		
		顺序sequential（如一个访问1MB请求）
			10MB连续传输
			7ms+3ms+（10/50）s=210ms
			Rio=10MB/210ms=47.6MB/s
			N*S
		随机random（每个请求很小，而且位置随机）
			10KB随机传输
			7ms+3ms+（10/50）ms=10.195ms
			Rio=10KB/10.195ms=0.981MB/s
			N*R

38.5
RAID 1级：镜像
	在stripe的基础上
	在每个块上多一个副本
	每个副本在不同的disk上

	磁盘0 【0，1，4，5】
	磁盘1 【0，1，4，5】
	磁盘2 【2，3，6，7】
	磁盘3 【2，3，6，7】

	可以在任意副本上读取（如读取逻辑块6，可以在磁盘2，3读取）
		
	容量capacity
		价格昂贵减少了一半
	可靠性reliability
		表现良好
		允许任何一个磁盘发送故障
	性能performance
		与0级相同
		写入需要二次写入（但是是并行，大致等于单词写入）
		但是逻辑写入要在物理写入之后
		要遭到最差的seek和旋转延迟

		吞吐量为N（磁盘数量）
		S（当磁盘顺序带宽）
		R（当磁盘随机带宽）

		顺序写入的数据只能分配一半的disk，另一半用来做副本
		顺序读取：读取时，一个磁盘会收到其他块的请求，跳过块的旋转时，不会提供有用的带宽
			N/2 * S
		随机读取的话可用用来分配读取
			N*R
		随机写入的话，另一半用来做副本
			N/2 *R

38.6
RAID 4级：通过奇偶校验节省空间
	奇偶校验parity
	可以用XOR
		基数个1为1
		偶数个1为0
	所有行的1必须是偶数
	用parity从故障中恢复
	磁盘0 【00，11，01，00】
	磁盘1 【10，11，00，11】
	磁盘p 【10，00，01，11】

	容量capacity
		允许一个磁盘作为parity
		N-1
	可靠性reliability
		容许一个磁盘故障，可以恢复数据
	性能performance
		（N-1）* S
		优化：全条写入full-stripe write
			当在有一条要写入的话
			可以先计算奇偶校验位然后并行写入
		随机读取：
			R*（N-1）
		随机写入：
			p也要更新（如何正确更新）
			加法奇偶校验additive parity
				在写入时
				并行读取其他块进行计算
			减法奇偶校验subtractive parity
				通过比较旧数据和新数据
				来确定是否更改校验位
				C（old） xor C（new）xor P（old）
				需要执行两次IO一次读取一次写入
				R/2（非常糟糕）

38.7
RAID 5级-旋转奇偶校验
	工作原理与RAID-4几乎完全相同
	只是将奇偶校验计数器旋转
	磁盘0 【0，3，p2，7】
	磁盘1 【1，p1，4，p3】
	磁盘2 【p0，2，5，6】
	消除4级的奇偶校验磁盘贫瘠
		并发修改校验位
		（R）*（N/4）
	
			
			
	