39.1
文件file：
	是一个线性字节数组
	每个字节都可以读取和写入
	文件都有某种低级的名称low level name-通常称为inode name

	文件系统仅仅将数据永久存在磁盘上

目录directory（文件夹）：
	一个目录，像文件
	也有low level name
	内容非常具体
	包含一个对的列表
		假设inode为10
		用户可读名为“foo”
		”foo“所在的目录会有一个对（“foo”，10）
		用可读名称映射到低级名称
	目录树directory tree
		该树下储存所有文件
	根目录（“/”）
		/foo/foo/bar.txt

	bar.txt-第一个是任意名称，第二个是文件类型type

39.3
创建文件

	用open系统调用完成
	调用open（）传入O_CREAT标志，程序会创建一个新文件
	O_CREAT:创建文件
	O_WRONLY：只写
	O_TRUNC:如果文件已经存在，删除所有内容
	以前的创建方式为create()

	open会返回一个值：文件描述符

文件描述符file descriptor
	是一个整数
	每个进程私有的
	用于访问文件
	可以看作文件类型的对象指针
	可以调用它的方法（read write）

39.4
读取和写入
	一般第一个文件描述符都是3

	012为标准输入-进程可以读取
	标准输出-进程可以写入已将信息显示到屏幕
	标准错误-可以写入错误消息

39.6
fsync(int fd)
在调用write时
	只会告诉系统要将数据持久存入
	系统可能会进行缓冲而不是直接开始写入
当调用该接口时
文件系统会将所有dirty数据强制写入磁盘
一旦所有数据写入完成，fsync（）就会返回


39.7
文件重命名
mv foo bar

rename（char*old，char*new）系统调用
这是atomic 调用（不会出现中间状态）


39.8
元数据metadata
	每个文件的大量信息（大小，inode号）
查看要调用stat（）或fstat（）

39.9
删除文件
unlink（“文件名”）


39.10
创建目录
mkdir（“名字”，0777）
空目录有两个条目
	. 自身
	.. 父目录条目

39.11
读取目录
用opendir（）
readdir（）
closedir（）

39.12
删除目录
rmdir()
在删除该目录之前要求目录是空的（只有“.”，“..”）


39.13
硬链接
删除文件用unlink（）

link（）需要两个参数-旧路径和新路径
ln recode.txt rec2
在创建目录中创建另一个名称
