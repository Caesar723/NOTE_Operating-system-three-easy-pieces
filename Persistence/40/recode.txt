40.0
vsfs(very simple file system)
	unix 文件系统简化版本
	纯软件

40.1

文件系统的数据结构 data structure
	文件系统在磁盘上使用哪些类型的结构来组织数据和元数据

访问方法 access method
	如何将解除发出调用-如open（），read（），write（），映射到结构上

40.2
将磁盘分成块 block
每个块为4kb
假设有64个块

用户数据（D）
	文件系统大多数空间都是用户数据
	存放用户数据的区域称为数据区域date region

inode table（I）
	要在磁盘留出一些空间来存放
	保存磁盘上inode的数组

分配结构 allocation structure
	要用某些方式来记录I和D空闲还是以分配
	是文件系统必须部分

位图bitmap
	有一个空闲列表
	指向空闲块
	有指向下一个空闲块

第一块-超级块superblock
	包含关于特定文件系统的信息
	文件系统有多少个inode 和数据块

40.3
inode （index node）
这个节点最初放在数组中
在访问特定的inode用到这个数组的index

每个inode都有一个数字（inumber）隐式引用-就是low level name
给定一个inumber就可以直接计算磁盘上相应节点的位置

所有关于文件的消息叫元数据metadata
文件除了存粹的用户数据之外，其他的都叫元数据

间接指针indirect pointer
	不是包含用户数据的块
	是包含更多指针的块
	每个指针指向用户数据
inode有一些固定指针和一个间接指针
如果文件够大，会分配一个间接块去存数据，让间接指针指向他
文件可以增长到1024x4kb

双重间接指针double direct pointer
	包含间接间接块指针
	这样文件就是1024x1024x4kb
以上为multilevel index多级索引
	使用不平衡树是因为大多数数据都很小
	大约2kb
	
40.4
目录组织
一个基本目录上包含一个二元组
系统将目录视为特殊文件
目录有一个inode
改目录由inode指向数据块

40.5
空闲空间管理free space management
文件系统要记录哪些inode是空的，这样分配目录时可以找到它

如果创建一个文件
	要为文件分配一个inode，文件系统通过位图搜索一个空闲内容并分配
	将inode标为已用
	用最终的消息更新磁盘上的位图
	
40.6
访问路径access path：读取和写入
从磁盘读取文件
	open（“/foo/bar”，O_RDONLY）
	文件系统先要找到文件bar的inode去获取基本信息
	文件系统必须遍历traverse路径名
	所有的traverse都要从根目录的inode开始
	根的inode是总所周知的
	大多数的根inode为2
	递归traverse路径名直到找到所需的路径名
	将bar的inode号存入内存为此进程分配一个文件描述符返回给用户
	
	每次读取要先查询inode然后读取
	然后更新inode的最后访问的字段
	
写入磁盘
	程序会掉用write
	与读取不同，写入文件会重新分配一个块
	当写入一个文件时
	不仅要将数据写入磁盘
	还要先决定哪些块分配给文件来更新磁盘的其他结构
	
	每次写入文件会有5个IO
		读取数据位图-更新以标记新分配的块被使用
		写入位图-将新状态写入磁盘
		读取inode
		写inode
		写入数据块本身
		
40.7
缓冲缓存
	读取和写入是昂贵的
	会导致慢速
	大多数文件系统积极使用DRAM来缓存重要的块
	
	现代系统采用动态划分dynamic partitioning
		操作系统将虚拟页面和文件系统页面集成到统一页面缓存中unified page cache
	第一次打开时间会久一点，但第二次打开就会命中缓存，不需要io
	但高速缓存不能减少写入流量
	

	写缓冲write buffer
		通过延迟写入
		文件系统可以将一些数据更新成很多数据（堆积起来）
		一次性写入可以节省io
		
	一些程序不喜欢缓冲因为在缓冲时如果系统崩溃数据会丢失
	所以会采用fsync强制写入
	

	


	