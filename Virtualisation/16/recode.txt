16.0
在堆栈之间有空闲区域internal fragmentation

所以简单的使用base 和 bound register 很浪费

如果剩余的物理地址无法提供连续区域来放置完整的地址空间，进程就无法运行

16.1
分段segmentation
在MMU引入不止一对base\bound register
给address space每个逻辑段segment（代码段，栈段，堆段）一对
操作系统能将不同段分到不同的物理区域

16.2
硬件在地址转换时候使用段寄存器，如何知道段内的偏移量
	显式explicit方式
	用虚拟地址的开头几位来显示不同的段（VAX/VMS系统用过）
	比如如果是14bit虚拟地址，连两bit就是用来标识段（00代码，01堆，10栈）

	硬件会以隐式implicit方法-通过地址产生的方法来确定段
		地址有程序计数器产生-代码段
		地址基于栈或base指针-栈段
		其他为堆段

16.3
栈是向上增长，那该怎么办
	需要一点硬件支持
	硬件需要知道段段增长方向
	如 11 1100 0000 0000
	11是段，告诉我们这是反向偏移
	1100 0000 0000是3KB
	假设这段可能是4kb
	3kb-4kb=-1kb
	偏移量是-1kb

16.4
为了节省内存，在地址空间之间共享share是很有用的
额外硬件支持，保护位protection bit
	为每个段增加了几个位
	标识程序是否能读写该段
	如果把该段标位read only
	同样的代码就可以被多个进程共享，而且不用担心破环隔离（因为只读）
	操作系统秘密的共享内存，进程又不能修改内存，使用假象就可以保持

硬件除了检查是否越界，还要检查特定访问是否允许

16.5
目前为止的分段是粗粒度coarse- grained的-地址空间分成较大的段

细粒度fine- grained-将地址空间分为大量较小的段
	可以高效利用内存
	需要硬件进一步支持
	要在内存中保存一种 段标segment table -可以支持创建很多段

16.6
物理内存会有许多不同大小的空闲内存-外部碎片external fragmentation
	紧凑compact物理内存，重新安排原有的段
	操作系统先终止进程，
	将数据复制到连续的内存中去
	改变他们的段寄存器的值，指向新的物理地址
	（这样可以让新的内存请求成功，但拷贝段是密集型的，成本过高）
列表管理算法（试图保留大的内存块用于分配）
	相关算法有上千种-最优匹配best fit