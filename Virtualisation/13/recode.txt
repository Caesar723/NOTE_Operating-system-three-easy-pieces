13.1
早期操作系统就是一个库
有一个程序从物理地址64kb开始，并使用剩下的所有内存

13.2
由于机器昂贵，人们开始共享机器
多道程序multiprogramming
	多个进程在给定时间内运行
	当有一个进程在等待IO的时候
	操作系统会切换进程

分时系统：
	让一个进程占用全部内存运行一小段时间
	然后停止它，将它的状态信息存到磁盘里
	加载其他进程的状态信息
	（太慢了）
	
	可以把所有进程的信息状态一直放在内存里

13.3
需要一个easy to use 的抽象abstract-地址空间address space（运行程序看到系统中的内存）

一个进程的address space包含运行程序所有的内存状态
	代码code
	栈stack -来保存当前函数调用的信息，分配空间给局部变量，传递参数和函数的返回值
	堆heap -管理动态分配，像C的 malloc（），C++的new 来获得内存

	代码位于地址空间的顶部-因为代码是静态的
	
	之后地址有两个区域会增长或收缩-heap在顶部（code的下面），stack在底部
	heap 在用户调用malloc时向下增长
	stack 在用户调用程序时向上增长
	（多线程threads不会这样）

虚拟化内存virtualizing memory-在单一物理内存上为多个进程构建地址空间抽象
	如果进程A尝试在虚拟地址virtualizing address 0加载操作
	操作系统在硬件的支持下，确保不是加载到物理地址0，而是物理地址XXXKB（320KB）

13.4
virtualizing memory 系统主要目标是透明transparency
	让程序感知不到内存被虚拟化的事实
另一个目标是效率efficiency：
	在时间上不会是程序运行更慢
	在空间上不需要额外太多内存支持虚拟化
第三目标是保护protection：
	操作系统要受到保护，不受其他进程的影响
	当一个进程要加载，储存，指令提取时，不能影响仍和别的进程保持操作系统
