8.0
MLFQ多级反馈队列 Multi-level FeedBack Queue
	MLFQ要解决优化周转时间turnaround time
	MLFQ希望给交互用户很好的交互体验，要降低响应时间
8.1
MLFQ基本规则
MLFQ有许多独立的队列Queue
一个工作只能存在一个queue中
每个queue有不同的优先级priority level
MLFQ总是优先执行较高优先级的工作
	比如有一个工作要不断进行IO操作，MLFQ会保持较高的优先级
	有个工作会长时间占用CPU它的优先级会降低
	如果A队列的优先级>B，运行A而且不运行b
	如果优先级一样，会采用RR调度
8.2 
尝试改变优先级
规则：
	工作进入系统时，放在最高优先级
	#工作用完整个时间片之后会降一个优先级
	#如果工作在这个世界片中释放了CPU优先级不变
缺点：
	饥饿starvation问题，如果有太多工作which会释放CPU，它们会在高优先级里不断占用CPU，导致低优先级的无法获得CPU
	有些程序会有意子时间片块运行玩之前，调用IO，这样优先级保持不变，这样CPU控制权大部分都是这个程序的
8.3
提升优先级
周期性地提升boost priority level
规则：
	经过一段时间S，会将所有工作加入到最高priority level
	（用来解决进程不会饿死starvation）
但如果S设置得太高，长工作会饿，S太低，交互型工作得不到CPU合适的时间比例
所以S被称为巫毒常量 voo-doo constant

8.4
更好的计时方式
将带有#的规则进行重写：
	无论主动放弃多少次CPU，只要一旦用完在某一层的时间配额，就会降一级而不是priority level不变
	（用来解决：有些程序会有意子时间片块运行玩之前，调用IO，这样优先级保持不变，这样CPU控制权大部分都是这个程序的）
8.5
有些调度程序会将最高priority level留给操作系统
